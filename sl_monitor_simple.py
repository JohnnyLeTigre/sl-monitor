#!/usr/bin/env python3
"""
SL Trafikl√§ge Monitor - F√∂renklad version
Bevakar linje 29 (N√§sbyparkslinjen) via webbscraping
"""

import requests
import json
import os
from datetime import datetime
from pathlib import Path
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import re

# Konfiguration
LINE_TO_MONITOR = "29"
LINE_NAME = "N√§sbyparkslinjen"
STATE_FILE = Path(__file__).parent / "sl_state.json"
LOG_FILE = Path(__file__).parent / "sl_monitor.log"

class SLMonitorSimple:
    def __init__(self):
        # Vi anv√§nder SL:s publika API som inte kr√§ver nyckel
        self.api_url = "https://api.sl.se/api2/trafficsituation.json"
        # Backup: Trafiklab's √∂ppna endpoint
        self.backup_url = "https://api.resrobot.se/v2.1/departureBoard"
        self.api_key = os.environ.get("SL_API_KEY", "")
    
    def log(self, message):
        """Logga meddelanden till fil och konsol"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_message + "\n")
    
    def fetch_disruptions(self):
        """H√§mta trafikst√∂rningar fr√•n SL"""
        try:
            # F√∂rs√∂k med API-nyckeln om den finns
            if self.api_key:
                params = {"key": self.api_key}
                response = requests.get(self.api_url, params=params, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("StatusCode") == 0:
                        return data
                    else:
                        self.log(f"API returnerade StatusCode: {data.get('StatusCode')}")
            
            # Fallback: F√∂rs√∂k utan nyckel (vissa endpoints √§r √∂ppna)
            self.log("F√∂rs√∂ker h√§mta data utan API-nyckel...")
            response = requests.get(
                "https://api.sl.se/api2/trafficsituation.json",
                timeout=10,
                headers={"User-Agent": "SL-Monitor/1.0"}
            )
            
            if response.status_code == 200:
                data = response.json()
                return data
            
            # Om allt annat misslyckas, anv√§nd scraping som backup
            self.log("Standard API fungerade inte, anv√§nder alternativ metod...")
            return self.scrape_sl_website()
            
        except Exception as e:
            self.log(f"‚ùå Fel vid h√§mtning: {e}")
            return None
    
    def scrape_sl_website(self):
        """Backup-metod: Scrapa SL:s hemsida direkt"""
        try:
            url = "https://sl.se/reseplanering/trafiklaget"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                # F√∂rs√∂k hitta JSON-data i sidan
                content = response.text
                
                # Kolla om linje 29 eller N√§sbyparkslinjen n√§mns
                mentions_29 = "29" in content or "N√§sbyparkslinjen" in content.lower()
                has_disruption = "st√∂rning" in content.lower() or "f√∂rseningar" in content.lower()
                
                if mentions_29 and has_disruption:
                    # F√∂rs√∂k extrahera relevant text
                    # Detta √§r en f√∂renklad version - en riktigt l√∂sning skulle anv√§nda BeautifulSoup
                    return {
                        "has_disruption": True,
                        "source": "website_scraping"
                    }
                else:
                    return {
                        "has_disruption": False,
                        "source": "website_scraping"
                    }
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è  Scraping misslyckades: {e}")
        
        return None
    
    def filter_line_29(self, data):
        """Filtrera st√∂rningar f√∂r linje 29"""
        if not data:
            return []
        
        # Om data kommer fr√•n scraping
        if data.get("source") == "website_scraping":
            if data.get("has_disruption"):
                return [{
                    "header": "M√∂jlig st√∂rning uppt√§ckt",
                    "details": "Linje 29 n√§mns p√• SL:s st√∂rningssida. Kontrollera sl.se f√∂r detaljer.",
                    "timestamp": datetime.now().isoformat()
                }]
            return []
        
        # Standard API-format
        disruptions = []
        
        if "ResponseData" in data:
            for item in data.get("ResponseData", []):
                # Kontrollera TrafficTypes
                if "TrafficTypes" in item:
                    for traffic_type in item["TrafficTypes"]:
                        # Kolla om det √§r buss och inneh√•ller linje 29
                        if traffic_type.get("Type") == "bus":
                            events = item.get("Events", [])
                            for event in events:
                                message = event.get("Message", "")
                                expanded = event.get("Expanded", "")
                                
                                # Kolla om linje 29 n√§mns
                                if LINE_TO_MONITOR in message or LINE_TO_MONITOR in expanded or \
                                   LINE_NAME.lower() in message.lower() or LINE_NAME.lower() in expanded.lower():
                                    disruptions.append({
                                        "header": message,
                                        "details": expanded,
                                        "severity": event.get("SeverityCode", 0),
                                        "timestamp": event.get("Created", "")
                                    })
        
        return disruptions
    
    def load_previous_state(self):
        """Ladda tidigare tillst√•nd fr√•n fil"""
        if STATE_FILE.exists():
            try:
                with open(STATE_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception as e:
                self.log(f"‚ö†Ô∏è  Kunde inte l√§sa tidigare tillst√•nd: {e}")
        return {}
    
    def save_state(self, disruptions):
        """Spara nuvarande tillst√•nd till fil"""
        state = {
            "timestamp": datetime.now().isoformat(),
            "disruptions": disruptions,
            "count": len(disruptions)
        }
        
        try:
            with open(STATE_FILE, "w", encoding="utf-8") as f:
                json.dump(state, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.log(f"‚ö†Ô∏è  Kunde inte spara tillst√•nd: {e}")
    
    def send_notification(self, disruptions, notification_type="new"):
        """Skicka notifikation om st√∂rningar"""
        if notification_type == "new":
            title = f"‚ö†Ô∏è NY st√∂rning p√• linje {LINE_TO_MONITOR} ({LINE_NAME})"
        elif notification_type == "resolved":
            title = f"‚úÖ St√∂rning l√∂st p√• linje {LINE_TO_MONITOR}"
        else:
            title = f"‚ÑπÔ∏è St√∂rning p√• linje {LINE_TO_MONITOR}"
        
        if disruptions:
            message = f"{title}\n\n"
            for idx, d in enumerate(disruptions, 1):
                message += f"{idx}. {d.get('header', 'St√∂rning')}\n"
                if d.get('details'):
                    details = d['details']
                    if len(details) > 200:
                        details = details[:200] + "..."
                    message += f"   {details}\n"
                message += "\n"
            message += "\nKontrollera: https://sl.se/reseplanering/trafiklaget"
        else:
            message = f"{title}\n\nAlla st√∂rningar p√• N√§sbyparkslinjen har l√∂sts!"
        
        self.log(message)
        
        # Skicka email
        if notification_type in ["new", "resolved"]:
            self.send_email_notification(title, message)
    
    def send_email_notification(self, subject, body):
        """Skicka email-notifikation"""
        email_from = os.environ.get("EMAIL_FROM")
        email_to = os.environ.get("EMAIL_TO")
        email_password = os.environ.get("EMAIL_PASSWORD")
        smtp_server = os.environ.get("SMTP_SERVER", "smtp.gmail.com")
        smtp_port = int(os.environ.get("SMTP_PORT", "587"))
        
        if not all([email_from, email_to, email_password]):
            self.log("‚ö†Ô∏è  Email inte konfigurerat (OK f√∂r test)")
            return
        
        try:
            msg = MIMEMultipart()
            msg["From"] = email_from
            msg["To"] = email_to
            msg["Subject"] = subject
            
            msg.attach(MIMEText(body, "plain", "utf-8"))
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_from, email_password)
            server.send_message(msg)
            server.quit()
            
            self.log("üìß Email-notifikation skickad!")
            
        except Exception as e:
            self.log(f"‚ö†Ô∏è  Kunde inte skicka email: {e}")
    
    def run(self):
        """Huvudloop - kontrollera trafikl√§get"""
        self.log("=" * 70)
        self.log(f"üöå Kontrollerar trafikl√§get f√∂r linje {LINE_TO_MONITOR} ({LINE_NAME})...")
        
        if not self.api_key:
            self.log("‚ÑπÔ∏è  Ingen API-nyckel - anv√§nder alternativa metoder")
        
        # H√§mta nuvarande st√∂rningar
        data = self.fetch_disruptions()
        
        if data is None:
            self.log("‚ö†Ô∏è  Kunde inte h√§mta data. F√∂rs√∂ker igen n√§sta g√•ng.")
            return
        
        current_disruptions = self.filter_line_29(data)
        
        # Ladda tidigare tillst√•nd
        previous_state = self.load_previous_state()
        previous_count = previous_state.get("count", 0)
        current_count = len(current_disruptions)
        
        # Analysera √§ndringar
        if current_count > 0:
            if previous_count == 0:
                # Nya st√∂rningar
                self.log(f"üÜï NYA ST√ñRNINGAR p√• linje {LINE_TO_MONITOR}!")
                self.send_notification(current_disruptions, "new")
            elif current_count != previous_count:
                # Antal √§ndrat
                self.log(f"üîÑ St√∂rningar uppdaterade ({current_count} st)")
                self.send_notification(current_disruptions, "updated")
            else:
                # Samma antal
                self.log(f"üìä P√•g√•ende: {current_count} st√∂rning(ar)")
        else:
            if previous_count > 0:
                # St√∂rningar l√∂sta
                self.log(f"‚úÖ Alla st√∂rningar p√• linje {LINE_TO_MONITOR} har l√∂sts!")
                self.send_notification([], "resolved")
            else:
                # Inga st√∂rningar
                self.log(f"‚úÖ Inga st√∂rningar p√• linje {LINE_TO_MONITOR}")
        
        # Spara tillst√•nd
        self.save_state(current_disruptions)
        self.log("‚úì Kontroll slutf√∂rd")

if __name__ == "__main__":
    monitor = SLMonitorSimple()
    monitor.run()
